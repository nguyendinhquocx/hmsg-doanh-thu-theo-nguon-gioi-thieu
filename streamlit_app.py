import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ph√¢n t√≠chdoanh thutheo Ngu·ªìn Gi·ªõi thi·ªáu",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"    
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    font-weight: bold;
    color: #1f77b4;
    text-align: center;
    margin-bottom: 2rem;
}
.metric-card {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #1f77b4;
}
.sidebar-header {
    font-size: 1.2rem;
    font-weight: bold;
    color: #1f77b4;
    margin-bottom: 1rem;
}
</style>
""", unsafe_allow_html=True)

# H√†m ƒë·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_data
def load_data():
    try:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
        df = pd.read_excel('file xu li du lieu.xlsx', sheet_name='table')
        
        # L√†m s·∫°ch t√™n c·ªôt
        df.columns = df.columns.str.strip()
        
        # Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu
        df = df.dropna()
        
        return df
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file 'file xu li du lieu.xlsx'. Vui l√≤ng ƒë·∫£m b·∫£o file t·ªìn t·∫°i trong th∆∞ m·ª•c hi·ªán t·∫°i.")
        return None
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return None

# H√†m t√≠nh to√°n c√°c ch·ªâ s·ªë
def calculate_metrics(df):
    # T·ªïng h·ª£p theo ngu·ªìn gi·ªõi thi·ªáu
    doanh_thu_theo_nguon = df.groupby('noi gioi thieu').agg({
        'doanh thu': 'sum',
        'so luong': 'sum'
    }).sort_values('doanh thu', ascending=False)
    
    # T·ªïng h·ª£p theo th√°ng
    doanh_thu_theo_thang = df.groupby('thang').agg({
        'doanh thu': 'sum',
        'so luong': 'sum'
    })
    
    # Hi·ªáu su·∫•t ngu·ªìn (doanh thu trung b√¨nh m·ªói l∆∞·ª£t)
    hieu_suat_nguon = doanh_thu_theo_nguon.copy()
    hieu_suat_nguon['trung binh'] = hieu_suat_nguon['doanh thu'] / hieu_suat_nguon['so luong']
    hieu_suat_nguon = hieu_suat_nguon.sort_values('trung binh', ascending=False)
    
    # Pivot table cho heatmap
    pivot_doanh_thu = df.pivot_table(
        values='doanh thu',
        index='noi gioi thieu',
        columns='thang',
        aggfunc='sum',
        fill_value=0
    )
    
    return doanh_thu_theo_nguon, doanh_thu_theo_thang, hieu_suat_nguon, pivot_doanh_thu

# H√†m t·∫°o bi·ªÉu ƒë·ªì
def create_charts(df, doanh_thu_theo_nguon, doanh_thu_theo_thang, hieu_suat_nguon, pivot_doanh_thu, selected_sources, selected_months):
    
    # L·ªçc d·ªØ li·ªáu theo l·ª±a ch·ªçn
    filtered_df = df[
        (df['noi gioi thieu'].isin(selected_sources)) & 
        (df['thang'].isin(selected_months))
    ]
    
    # 1. Bi·ªÉu ƒë·ªì c·ªôt Top ngu·ªìn gi·ªõi thi·ªáu
    top_sources = doanh_thu_theo_nguon.head(10)
    fig1 = px.bar(
        x=top_sources.index,
        y=top_sources['doanh thu'],
        title="Top 10 Ngu·ªìn Gi·ªõi thi·ªáu theo Doanh thu",
        labels={'x': 'Ngu·ªìn Gi·ªõi thi·ªáu', 'y': 'Doanh thu (VNƒê)'},
        color=top_sources['doanh thu'],
        color_continuous_scale='Blues'
    )
    fig1.update_layout(xaxis_tickangle=-45, height=500)
    fig1.update_traces(texttemplate='%{y:,.0f}', textposition='outside')
    
    # 2. Bi·ªÉu ƒë·ªì tr√≤n ph√¢n b·ªëdoanh thuTop 5
    top5_sources = doanh_thu_theo_nguon.head(5)
    fig2 = px.pie(
        values=top5_sources['doanh thu'],
        names=top5_sources.index,
        title="Ph√¢n b·ªëdoanh thuTop 5 Ngu·ªìn Gi·ªõi thi·ªáu"
    )
    fig2.update_traces(textposition='inside', textinfo='percent+label')
    
    # 3. Xu h∆∞·ªõngdoanh thutheo th√°ng
    fig3 = px.line(
        x=doanh_thu_theo_thang.index,
        y=doanh_thu_theo_thang['doanh thu'],
        title="Xu h∆∞·ªõngdoanh thutheo Th√°ng",
        labels={'x': 'Th√°ng', 'y': 'Doanh thu (VNƒê)'},
        markers=True
    )
    fig3.update_layout(height=400)
    
    # 4. Heatmap doanh thu
    top10_pivot = pivot_doanh_thu.loc[doanh_thu_theo_nguon.head(10).index]
    fig4 = px.imshow(
        top10_pivot.values,
        x=top10_pivot.columns,
        y=top10_pivot.index,
        title="Heatmapdoanh thutheo Ngu·ªìn Gi·ªõi thi·ªáu v√† Th√°ng (Top 10)",
        color_continuous_scale='Blues',
        aspect='auto'
    )
    fig4.update_layout(height=600)
    
    # 5. Scatter plot hi·ªáu su·∫•t
    filtered_hieu_suat = hieu_suat_nguon[hieu_suat_nguon['so luong'] >= 5]
    fig5 = px.scatter(
        x=filtered_hieu_suat['so luong'],
        y=filtered_hieu_suat['trung binh'],
        hover_name=filtered_hieu_suat.index,
        title="M·ªëi quan h·ªá gi·ªØa S·ªë l∆∞·ª£ng v√†doanh thuTB/l∆∞·ª£t (‚â•5 l∆∞·ª£t)",
        labels={'x': 'T·ªïng s·ªë l∆∞·ª£ng', 'y': 'Doanh thu trung b√¨nh m·ªói l∆∞·ª£t (VNƒê)'},
        size=filtered_hieu_suat['doanh thu'],
        color=filtered_hieu_suat['trung binh'],
        color_continuous_scale='Viridis'
    )
    fig5.update_layout(height=500)
    
    # 6. Xu h∆∞·ªõng Top 5 ngu·ªìn theo th√°ng
    top_5_sources = doanh_thu_theo_nguon.head(5).index
    pivot_for_line = df[df['noi gioi thieu'].isin(top_5_sources)].pivot_table(
        values='doanh thu',
        index='thang',
        columns='noi gioi thieu',
        aggfunc='sum',
        fill_value=0
    )
    
    fig6 = go.Figure()
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']
    for i, source in enumerate(top_5_sources):
        if source in pivot_for_line.columns:
            short_name = source[:30] + '...' if len(source) > 30 else source
            fig6.add_trace(go.Scatter(
                x=pivot_for_line.index,
                y=pivot_for_line[source],
                mode='lines+markers',
                name=short_name,
                line=dict(color=colors[i], width=3),
                marker=dict(size=8)
            ))
    
    fig6.update_layout(
        title="Xu h∆∞·ªõngdoanh thuTop 5 Ngu·ªìn Gi·ªõi thi·ªáu theo Th√°ng",
        xaxis_title="Th√°ng",
        yaxis_title="Doanh thu (VNƒê)",
        height=500,
        hovermode='x unified'
    )
    
    return fig1, fig2, fig3, fig4, fig5, fig6

# Main app
def main():
    # Header
    st.markdown('<h1 class="main-header">üìä Ph√¢n t√≠chdoanh thutheo Ngu·ªìn Gi·ªõi thi·ªáu</h1>', unsafe_allow_html=True)
    
    # Load data
    df = load_data()
    if df is None:
        return
    
    # Sidebar filters
    st.sidebar.markdown('<div class="sidebar-header">üîß B·ªô l·ªçc d·ªØ li·ªáu</div>', unsafe_allow_html=True)
    
    # Filter by source
    all_sources = df['noi gioi thieu'].unique().tolist()
    selected_sources = st.sidebar.multiselect(
        "Ch·ªçn ngu·ªìn gi·ªõi thi·ªáu:",
        options=all_sources,
        default=all_sources
    )
    
    # Filter by month
    all_months = sorted(df['thang'].unique().tolist())
    selected_months = st.sidebar.multiselect(
        "Ch·ªçn th√°ng:",
        options=all_months,
        default=all_months
    )
    
    # Calculate metrics
    doanh_thu_theo_nguon, doanh_thu_theo_thang, hieu_suat_nguon, pivot_doanh_thu = calculate_metrics(df)
    
    # Filter data for metrics
    filtered_df = df[
        (df['noi gioi thieu'].isin(selected_sources)) & 
        (df['thang'].isin(selected_months))
    ]
    
    # Display key metrics
    st.markdown("## üìà T·ªïng quan")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_revenue = filtered_df['doanh thu'].sum()
        st.metric("T·ªïng Doanh thu", f"{total_revenue:,.0f} VNƒê")
    
    with col2:
        total_quantity = filtered_df['so luong'].sum()
        st.metric("T·ªïng S·ªë l∆∞·ª£ng", f"{total_quantity:,.0f} l∆∞·ª£t")
    
    with col3:
        avg_revenue = total_revenue / total_quantity if total_quantity > 0 else 0
        st.metric("Doanh thu TB/l∆∞·ª£t", f"{avg_revenue:,.0f} VNƒê")
    
    with col4:
        num_sources = filtered_df['noi gioi thieu'].nunique()
        st.metric("S·ªë ngu·ªìn gi·ªõi thi·ªáu", f"{num_sources} ngu·ªìn")
    
    # Create charts
    fig1, fig2, fig3, fig4, fig5, fig6 = create_charts(
        df, doanh_thu_theo_nguon, doanh_thu_theo_thang, 
        hieu_suat_nguon, pivot_doanh_thu, selected_sources, selected_months
    )
    
    # Display charts
    st.markdown("## üìä Bi·ªÉu ƒë·ªì ph√¢n t√≠ch")
    
    # Row 1
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig1, use_container_width=True)
    with col2:
        st.plotly_chart(fig2, use_container_width=True)
    
    # Row 2
    st.plotly_chart(fig3, use_container_width=True)
    
    # Row 3
    st.plotly_chart(fig4, use_container_width=True)
    
    # Row 4
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig5, use_container_width=True)
    with col2:
        st.plotly_chart(fig6, use_container_width=True)
    
    # Data tables
    st.markdown("## üìã B·∫£ng d·ªØ li·ªáu chi ti·∫øt")
    
    tab1, tab2, tab3 = st.tabs(["Theo Ngu·ªìn", "Theo Th√°ng", "Hi·ªáu su·∫•t"])
    
    with tab1:
        st.dataframe(
            doanh_thu_theo_nguon.style.format({
                'doanh thu': '{:,.0f}',
                'so luong': '{:,.0f}'
            }),
            use_container_width=True
        )
    
    with tab2:
        st.dataframe(
            doanh_thu_theo_thang.style.format({
                'doanh thu': '{:,.0f}',
                'so luong': '{:,.0f}'
            }),
            use_container_width=True
        )
    
    with tab3:
        st.dataframe(
            hieu_suat_nguon.style.format({
                'doanh thu': '{:,.0f}',
                'so luong': '{:,.0f}',
                'trung binh': '{:,.0f}'
            }),
            use_container_width=True
        )
    
    # Summary
    st.markdown("## üìù T√≥m t·∫Øt ph√¢n t√≠ch")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Top 3 Ngu·ªìn Gi·ªõi thi·ªáu")
        for i, (nguon, data) in enumerate(doanh_thu_theo_nguon.head(3).iterrows(), 1):
            percentage = data['doanh thu']/df['doanh thu'].sum()*100
            st.markdown(f"""
            **{i}. {nguon}**
            - Doanh thu: {data['doanh thu']:,.0f} VNƒê ({percentage:.1f}%)
            - S·ªë l∆∞·ª£ng: {data['so luong']:,.0f} l∆∞·ª£t
            """)
    
    with col2:
        st.markdown("### Th√¥ng tin th·ªùi gian")
        st.markdown(f"""
        - **Th·ªùi gian ph√¢n t√≠ch:** {df['thang'].min()} - {df['thang'].max()}
        - **T·ªïng s·ªë th√°ng:** {df['thang'].nunique()} th√°ng
        - **T·ªïng s·ªë ngu·ªìn:** {df['noi gioi thieu'].nunique()} ngu·ªìn
        """)

if __name__ == "__main__":
    main()